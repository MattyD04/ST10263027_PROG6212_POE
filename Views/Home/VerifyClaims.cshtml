@model IEnumerable<ST10263027_PROG6212_POE.Models.ClaimViewModel>
@{
    ViewData["Title"] = "Verify Claims";
}
<!-- Code correction and changes done by Claude AI to fix error with displaying of information in table-->
<style>
    body {
        background: linear-gradient(skyblue, red);
        background-repeat: no-repeat;
        background-attachment: fixed;
        font-family: Arial, sans-serif;
        margin: 0;
        padding: 0;
        min-height: 100vh;
    }

    .header-container {
        max-width: 1400px;
        margin: 0 auto;
    }

    h1 {
        text-align: center;
        color: white;
        padding: 20px 0;
        margin: 0;
        background-color: rgba(0, 0, 0, 0.5);
    }

    .form-container {
        max-width: 1400px;
        margin: 20px auto;
        padding: 20px;
        background-color: #f9f9f9;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .form-section {
        margin-bottom: 20px;
    }

    table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
        background-color: white;
    }

    th, td {
        border: 1px solid #ddd;
        padding: 12px;
        text-align: left;
        white-space: normal;
    }

    th {
        background-color: #f2f2f2;
        font-weight: bold;
    }

    .action-buttons {
        display: flex;
        gap: 10px;
        justify-content: flex-start;
    }

    .accept-btn, .reject-btn {
        padding: 5px 10px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        transition: background-color 0.3s;
        font-size: 0.9rem;
    }

    .accept-btn {
        background-color: #4CAF50;
        color: white;
    }

    .reject-btn {
        background-color: #f44336;
        color: white;
    }

    .accept-btn:hover {
        background-color: #45a049;
    }

    .reject-btn:hover {
        background-color: #da190b;
    }

    .notes-cell {
        max-width: 200px;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }

    .no-claims-message {
        text-align: center;
        font-style: italic;
        color: #666;
        padding: 20px;
    }

    .alert {
        padding: 15px;
        margin: 20px auto;
        border: 1px solid transparent;
        border-radius: 4px;
        max-width: 1400px;
    }

    .alert-success {
        color: #3c763d;
        background-color: #dff0d8;
        border-color: #d6e9c6;
    }

    .alert-danger {
        color: #a94442;
        background-color: #f2dede;
        border-color: #ebccd1;
    }

    .table-wrapper {
        width: 100%;
    }
</style>

<div class="header-container">
    <h1>Verify Claims</h1>
</div>

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success">
        @TempData["SuccessMessage"]
    </div>
}

@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger">
        @TempData["ErrorMessage"]
    </div>
}

<div class="header-container">
    <h1>Verify Claims</h1>
</div>

<div class="form-container">
    <div class="form-section">
        <h2>Pending Claims</h2>
        <p class="claims-count">Claims found: @(Model?.Count() ?? 0)</p>

        <div class="table-wrapper">
            <table class="claims-table">
                <thead>
                    <tr>
                        <th>Claim Number</th>
                        <th>Lecturer Number</th>
                        <th>Submission Date</th>
                        <th>Hours Worked</th>
                        <th>Hourly Rate</th>
                        <th>Total Amount</th>
                        <th>Comments</th>
                        <th>File Name</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @if (Model?.Any() == true)
                    {
                        foreach (var claim in Model)
                        {
                            <tr>
                                <td>@claim.ClaimNum</td>
                                <td>@claim.LecturerNum</td>
                                <td>@claim.SubmissionDate.ToString("yyyy-MM-dd")</td>
                                <td>@claim.HoursWorked</td>
                                <td>@($"R{claim.HourlyRate:F2}")</td>
                                <td>@($"R{claim.TotalAmount:F2}")</td>
                                <td class="notes-cell" title="@claim.Comments">@claim.Comments</td>
                                <td>@(string.IsNullOrEmpty(claim.Filename) ? "No file" : claim.Filename)</td>
                                <td class="action-buttons">
                                    <button onclick="handleClaimAction(@claim.ClaimID, 'Approve')" class="accept-btn">Approve</button>
                                    <button onclick="handleClaimAction(@claim.ClaimID, 'Reject')" class="reject-btn">Reject</button>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="9" class="no-claims-message">No pending claims to display.</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>
@section Scripts {
    <script>
        function initializeClaimsPage() {
            if (document.querySelector('.claims-table')) {
                loadPendingClaims();
            }
        }
        function loadPendingClaims() {
            fetch('/api/VerifyClaimsWebAPI/GetPendingClaims')
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(claims => {
                    updateClaimsTable(claims);
                    updateClaimsCount(claims.length);
                })
                .catch(error => {
                    console.error('Error loading claims:', error);
                    showAlert('Error loading claims. Please try again.', 'danger');
                });
        }
        function updateClaimsTable(claims) {
            const tableBody = document.querySelector('.claims-table tbody');
            if (!tableBody) return;
            tableBody.innerHTML = '';
            if (claims.length === 0) {
                tableBody.innerHTML = `
                            <tr>
                                <td colspan="9" class="no-claims-message">No pending claims to display.</td>
                            </tr>`;
                return;
            }
            claims.forEach(claim => {
                const row = `
                            <tr>
                                <td>${claim.claimNum}</td>
                                <td>${claim.lecturerNum}</td>
                                <td>${new Date(claim.submissionDate).toLocaleDateString()}</td>
                                <td>${claim.hoursWorked}</td>
                                <td>R${claim.hourlyRate.toFixed(2)}</td>
                                <td>R${claim.totalAmount.toFixed(2)}</td>
                                <td class="notes-cell" title="${claim.comments}">${claim.comments}</td>
                                <td>${claim.filename || 'No file'}</td>
                                <td class="action-buttons">
                                    <button onclick="handleClaimAction(${claim.claimID}, 'Approve')" class="accept-btn">Approve</button>
                                    <button onclick="handleClaimAction(${claim.claimID}, 'Reject')" class="reject-btn">Reject</button>
                                </td>
                            </tr>`;
                tableBody.insertAdjacentHTML('beforeend', row);
            });
        }
        function updateClaimsCount(count) {
            const countElement = document.querySelector('.claims-count');
            if (countElement) {
                countElement.textContent = `Claims found: ${count}`;
            }
        }
        function handleClaimAction(claimId, action) {
            if (!confirm(`Are you sure you want to ${action.toLowerCase()} this claim?`)) {
                return;
            }
            fetch(`/api/VerifyClaimsWebAPI/${action}Claim/${claimId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    showAlert(data.message, 'success');
                    loadPendingClaims();
                })
                .catch(error => {
                    console.error(`Error ${action.toLowerCase()}ing claim:`, error);
                    showAlert(`Error ${action.toLowerCase()}ing claim. Please try again.`, 'danger');
                });
        }
        function showAlert(message, type) {
            const alertDiv = document.createElement('div');
            alertDiv.className = `alert alert-${type}`;
            alertDiv.textContent = message;
            const container = document.querySelector('.form-container');
            if (container) {
                container.insertBefore(alertDiv, container.firstChild);
                setTimeout(() => alertDiv.remove(), 5000);
            }
        }
        document.addEventListener('DOMContentLoaded', initializeClaimsPage);
    </script>
}

