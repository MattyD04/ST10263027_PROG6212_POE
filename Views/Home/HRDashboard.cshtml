@model ST10263027_PROG6212_POE.Models.HRDashboardViewModel
@{
    ViewData["Title"] = "HR Dashboard";
}

<style>
    body {
        background: linear-gradient(to bottom, #87CEEB, #FF0000);
        background-repeat: no-repeat;
        background-attachment: fixed;
        font-family: Arial, sans-serif;
        margin: 0;
        padding: 0;
        min-height: 100vh;
    }

    .header-container {
        max-width: 1400px;
        margin: 0 auto;
    }

    .display-4 {
        text-align: center;
        color: white;
        padding: 20px 0;
        margin: 0;
        background-color: rgba(0, 0, 0, 0.5);
    }

    .container {
        max-width: 1400px;
        margin: 20px auto;
        padding: 20px;
        background-color: #f9f9f9;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .welcome-text {
        text-align: center;
        color: #333;
        margin-bottom: 20px;
    }

    table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
        background-color: white;
    }

    th, td {
        border: 1px solid #ddd;
        padding: 12px;
        text-align: left;
        white-space: normal;
    }

    th {
        background-color: #f2f2f2;
        font-weight: bold;
    }

    .btn-primary {
        background-color: #4CAF50;
        color: white;
        border: none;
        padding: 5px 10px;
        border-radius: 4px;
        cursor: pointer;
        transition: background-color 0.3s;
        font-size: 0.9rem;
    }

    .btn-primary:hover {
        background-color: #45a049;
    }

    .alert {
        padding: 15px;
        margin: 20px auto;
        border: 1px solid transparent;
        border-radius: 4px;
        max-width: 1400px;
    }

    .alert-success {
        color: #3c763d;
        background-color: #dff0d8;
        border-color: #d6e9c6;
    }

    .text-center {
        text-align: center;
    }

    .table-wrapper {
        width: 100%;
        overflow-x: auto;
    }

    .table-striped tbody tr:nth-of-type(odd) {
        background-color: rgba(0, 0, 0, 0.05);
    }

    .password-input {
        width: 150px;
        padding: 5px;
        border: 1px solid #ddd;
        border-radius: 4px;
    }

    .password-update-btn {
        background-color: #4CAF50;
        color: white;
        border: none;
        padding: 5px 10px;
        border-radius: 4px;
        cursor: pointer;
        transition: background-color 0.3s;
        font-size: 0.9rem;
    }

    .password-update-btn:hover {
        background-color: #45a049;
    }

    footer {
        display: none;
    }
</style>

<div class="header-container">
    <h1 class="display-4">HR Dashboard</h1>
</div>

<div class="container">
    <h2>Approved Claims</h2>
    @if (TempData["Message"] != null)
    {
            <div class="alert alert-success">
            @TempData["Message"]
            </div>
    }

    <div class="table-wrapper">
        <form asp-action="GenerateInvoice" asp-controller="Home" method="post">
            <table class="table table-bordered table-striped">
                <thead>
                    <tr>
                        <th>Claim ID</th>
                        <th>Claim Number</th>
                        <th>Lecturer Number</th>
                        <th>Submission Date</th>
                        <th>Hours Worked</th>
                        <th>Hourly Rate</th>
                        <th>Total Amount</th>
                        <th>Comments</th>
                        <th>Filename</th>
                        <th>Claim Status</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @if (Model.ApprovedClaims != null && Model.ApprovedClaims.Any())
                    {
                        foreach (var claim in Model.ApprovedClaims)
                        {
                                    <tr>
                                        <td>@claim.ClaimID</td>
                                        <td>@claim.ClaimNum</td>
                                        <td>@claim.LecturerNum</td>
                                        <td>@claim.SubmissionDate.ToString("yyyy-MM-dd")</td>
                                        <td>@claim.HoursWorked</td>
                                        <td>R @claim.HourlyRate</td>
                                        <td>R @claim.TotalAmount</td>
                                        <td>@claim.Comments</td>
                                        <td>@claim.Filename</td>
                                        <td>@claim.ClaimStatus</td>
                                        <td>
                                            <input type="hidden" name="claimId" value="@claim.ClaimID" />
                                            <button type="submit" class="btn btn-primary">Generate Invoice</button>
                                        </td>
                                    </tr>
                        }
                    }
                    else
                    {
                            <tr>
                                <td colspan="11" class="text-center">No approved claims found.</td>
                            </tr>
                    }
                </tbody>
            </table>
        </form>
    </div>
</div>

<div style="height: 40px;"></div>

<div class="container">
    <h2>Lecturer Data</h2>
    <div class="table-wrapper">
        <table class="table table-bordered table-striped">
            <thead>
                <tr>
                    <th>Lecturer ID</th>
                    <th>Lecturer Number</th>
                    <th>Hourly Rate</th>
                    <th>Hours Worked</th>
                    <th>Change Password</th>
                </tr>
            </thead>
            <tbody>
                @if (Model.Lecturers != null && Model.Lecturers.Any())
                {
                    foreach (var lecturer in Model.Lecturers)
                    {
                                <tr>
                                    <td>@lecturer.LecturerId</td>
                                    <td>@lecturer.LecturerNum</td>
                                    <td>R @lecturer.HourlyRate</td>
                                    <td>@lecturer.HoursWorked</td>
                                    <td>
                                        <input type="password" class="password-input" id="password-@lecturer.LecturerId" placeholder="New Password" />
                                        <button class="password-update-btn" onclick="updatePassword(@lecturer.LecturerId)">Update</button>
</td>
                                </tr>
                    }
                }
                else
                {
                        <tr>
                            <td colspan="5" class="text-center">No lecturer data found.</td>
                        </tr>
                }
            </tbody>
        </table>
    </div>
</div>
@section Scripts {
        <script>
            function updatePassword(lecturerId) {
                // Get the password input element
                const passwordInput = document.getElementById(`password-${lecturerId}`);
                const newPassword = passwordInput.value;

                // Validate password is not empty
                if (!newPassword) {
                    alert('Please enter a new password');
                    return;
                }

                // Log the values being sent (for debugging)
                console.log('Updating password for lecturer:', lecturerId);
                console.log('New password length:', newPassword.length);

                // Send the update request
                fetch('/Home/UpdateLecturerPassword', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                    },
                    body: `lecturerId=${lecturerId}&newPassword=${encodeURIComponent(newPassword)}`
                })
                .then(response => {
                    console.log('Response status:', response.status); // Debug response status
                    return response.json();
                })
                .then(data => {
                    console.log('Response data:', data); // Debug response data
                    if (data.success) {
                        alert('Password updated successfully');
                        passwordInput.value = ''; // Clear the password field
                    } else {
                        alert(data.message || 'Error updating password');
                    }
                })
                .catch(error => {
                    console.error('Error updating password:', error);
                    alert('Error updating password. Please check the console for details.');
                });
            }

            // Add event listeners for enter key on password inputs
            document.addEventListener('DOMContentLoaded', function() {
                const passwordInputs = document.querySelectorAll('input[id^="password-"]');
                passwordInputs.forEach(input => {
                    input.addEventListener('keypress', function(e) {
                        if (e.key === 'Enter') {
                            const lecturerId = this.id.split('-')[1];
                            updatePassword(lecturerId);
                        }
                    });
                });
            });
        </script>
}